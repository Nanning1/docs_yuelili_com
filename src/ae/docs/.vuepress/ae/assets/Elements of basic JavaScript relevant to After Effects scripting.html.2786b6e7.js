import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,e as d}from"./app.75ca2a8e.js";const a={},r=d('<h2 id="elements-of-basic-javascript-relevant-to-after-effects-scripting\xB6" tabindex="-1"><a class="header-anchor" href="#elements-of-basic-javascript-relevant-to-after-effects-scripting\xB6" aria-hidden="true">#</a> Elements of basic JavaScript relevant to After Effects scripting\xB6</h2><p><strong>JavaScript variables</strong></p><p>Scripting shares a global environment, so any script executed at startup candefine variables and functions that are available to all scripts. In allcases, variables and functions, once defined by running a script that containsthem, persist in subsequent scripts during a given After Effects session. Oncethe application is quit, all such globally defined variables and functions arecleared. Scripters should be careful about giving variables in scripts uniquenames, so that a script does not inadvertently reassign global variablesintended to persist throughout a session.</p><h2 id="keywords-and-statement-syntax\xB6" tabindex="-1"><a class="header-anchor" href="#keywords-and-statement-syntax\xB6" aria-hidden="true">#</a> Keywords and Statement Syntax\xB6</h2><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td>Keyword/Statement</td><td>Description</td></tr><tr><td><code>break</code></td><td>Standard JavaScript; exit the currently executing loop.</td></tr><tr><td><code>continue</code></td><td>JavaScript; cease execution of the current loop iteration.</td></tr><tr><td><code>case</code></td><td>Label used in a <code>switch</code> statement.</td></tr><tr><td><code>default</code></td><td>Label used in a <code>switch</code> statement when a <code>case</code> label is not found.</td></tr><tr><td><code>do...while</code></td><td>Standard JavaScript construct. Similar to the while loop, except loopcondition evaluation occurs at the end of the loop.</td></tr><tr><td><code>false</code></td><td>Literal representing the Boolean false value.</td></tr><tr><td><code>for</code></td><td>Standard JavaScript loop construct.</td></tr><tr><td><code>for...in</code></td><td>Standard JavaScript construct. Provides a way to easily loop through theproperties of an object.</td></tr><tr><td><code>function</code></td><td>Used to define a function.</td></tr><tr><td><code>if/if...else</code></td><td>Standard JavaScript conditional constructs.</td></tr><tr><td><code>new</code></td><td>Standard JavaScript constructor statement.</td></tr><tr><td><code>null</code></td><td>Assigned to a variable, array element, or object property to indicate that itdoes not contain a legalvalue.</td></tr><tr><td><code>return</code></td><td>Standard JavaScript way of returning a value from a function or exiting a</td></tr></tbody></table><p>function.</p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>switch</code></td><td>Standard JavaScript way of evaluating a JavaScript expression and attemptingto match the expression\u2019s value to a <code>case</code> label.</td></tr><tr><td><code>this</code></td><td>Standard JavaScript method of indicating the current object.</td></tr><tr><td><code>true</code></td><td>Literal representing the Boolean true value.</td></tr><tr><td><code>undefined</code></td><td>Indicates that the variable, array element, or object property has not yet</td></tr></tbody></table><p>been assigned a value.</p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>var</code></td><td>Standard JavaScript syntax used to declare a local variable.</td></tr><tr><td><code>while</code></td><td>Standard JavaScript construct. Similar to the do\u2026whileloop, except loopcondition evaluation occurs at the beginning of the loop.</td></tr><tr><td><code>with</code></td><td>Standard JavaScript construct used to specify an object to use in subsequent</td></tr></tbody></table><p>statements.</p><p><strong>JavaScript operators</strong></p><p>The following tables list and describe all operators recognized by the AfterEffects scripting engine and show the precedence and associativity for all operators.</p><h2 id="description-of-operators\xB6" tabindex="-1"><a class="header-anchor" href="#description-of-operators\xB6" aria-hidden="true">#</a> Description of Operators\xB6</h2><p>| Property | Type | | --------- | ------------------------------------------------------- | ------------------------------------- | ----------- | | Operators | Description | | <code>new</code> | Create new object instance. | | <code>delete</code> | Delete property from an object. | | <code>typeof</code> | Returns data type. | | <code>void</code> | Returns undefined value. | | <code>.</code> | Object member. | | <code>[]</code> | Array element. | | <code>()</code> | Function call. | | <code>++</code> | Pre- or post-increment. | | <code>--</code> | Pre- or post-decrement. | | <code>-</code> | Unary negation or subtraction. | | <code>~</code> | Bitwise NOT. | | <code>!</code> | Logical NOT. | | <code>*</code> | Multiply. | | <code>/</code> | Divide. | | <code>%</code> | Modulo division. | | <code>+</code> | Add. | | <code>&lt;&lt;</code> | Bitwise left shift. | | <code>&gt;&gt;</code> | Bitwise right shift. | | <code>&gt;&gt;&gt;</code> | Unsigned bitwise right shift. | | <code>&lt;</code> | Less than. | | <code>&lt;=</code> | Less than or equal. | | <code>&gt;</code> | Greater than. | | <code>&gt;=</code> | Greater than or equal. | | <code>==</code> | Equal. | | <code>!=</code> | Not equal. | | <code>&amp;</code> | Bitwise AND. | | <code>^</code> | Bitwise XOR. | | <code> |</code> | Bitwise OR. | | <code>&amp;&amp;</code> | Logical AND. | | <code> | |</code> | Logical OR. | | <code>?:</code> | Conditional (ternary). | | <code>=</code> | Assignment. | | <code>+=</code> | Assignment with add operation. | | <code>-=</code> | Assignment with subtract operation. | | <code>*=</code> | Assignment with multiply operation. | | <code>/=</code> | Assignment with divide operation. | | <code>%=</code> | Assignment with modulo division operation. | | <code>&lt;&lt;=</code> | Assignment with bitwise left shift operation. | | <code>&gt;&gt;=</code> | Assignment with bitwise right shift operation. | | <code>&gt;&gt;&gt;=</code> | Assignment with unsigned bitwise right shift operation. | | <code>&amp;=</code> | Assignment with bitwise AND operation. | | <code>^=</code> | Assignment with bitwise XOR operation. | | <code> | =</code> | Assignment with bitwise OR operation. | | <code>,</code> | Multiple evaluation. |</p><h2 id="operator-precedence\xB6" tabindex="-1"><a class="header-anchor" href="#operator-precedence\xB6" aria-hidden="true">#</a> Operator Precedence\xB6</h2><p>| Property | Type | | --------------------------------------------------------- | -------------- | ------------- | ------------- | | Operators (highest precedence to lowest) | Associativity | | [], (), . | left to right | | new, delete, - (unary negation), !, type of, void , ++, \u2013 | right to left | | *, /, % | left to right | | +, - (subtraction) | left to right | | &lt;&lt;, &gt;&gt;, &gt;&gt;&gt; | left to right | | &lt;, &lt;=, &gt;, &gt;= | left to right | | = =, ! = | left to right | | &amp; | left to right | | ^ | left to right | | | | left to right | | &amp;&amp; | left to right | | | | | left to right | | ?: | right to left | | ==, /=, %=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=, &amp;=, ^=, | =, +=, -=, *= | right to left | | , | left to right |</p>',16),i=[r];function c(n,s){return e(),o("div",null,i)}const h=t(a,[["render",c],["__file","Elements of basic JavaScript relevant to After Effects scripting.html.vue"]]);export{h as default};
