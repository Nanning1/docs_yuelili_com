import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as i,a as e,b as t,d as n,w as a,e as o,r as l}from"./app.75ca2a8e.js";const p={},u=e("h2",{id:"description",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),t(" Description")],-1),d=e("hr",null,null,-1),h=e("h2",{id:"sourcetext-style",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sourcetext-style","aria-hidden":"true"},"#"),t(" SourceText.style")],-1),x=e("p",null,[e("strong",null,"Description")],-1),m=e("p",null,[t("Returns the text style object for a given "),e("code",null,"sourceText"),t(" property.")],-1),y=e("p",null,[e("strong",null,"Type")],-1),_=o(`<hr><h2 id="sourcetext-getstyleat-charindex-t-time" tabindex="-1"><a class="header-anchor" href="#sourcetext-getstyleat-charindex-t-time" aria-hidden="true">#</a> SourceText.getStyleAt(<code>charIndex</code>, <code>t = time</code>)</h2><p><strong>Description</strong></p><p>This function returns the style value of a particular character at a specific time.</p><p>In case the style is keyframed and changes over time, use the second <code>time</code>parameter to specify the target time to get the style at.</p><p>:::info Note</p><p>Using SourceText.style is the same as using <code>text.sourceText.getStyleAt(0,0)</code> :::</p><p>For example, to get the style of the first character at the beginning of the timeline:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>text<span class="token punctuation">.</span>sourceText<span class="token punctuation">.</span><span class="token function">getStyleAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>index</code></td><td>Number. The index of the letter or character whose style is needed</td></tr><tr><td><code>time</code></td><td>Number, optional. The time within the composition to get the style from.</td></tr></tbody></table><p>Defaults to <code>time</code>.</p><p><strong>Type</strong></p>`,13),f=e("hr",null,null,-1),g=e("h2",{id:"sourcetext-createstyle",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sourcetext-createstyle","aria-hidden":"true"},"#"),t(" SourceText.createStyle()")],-1),k=e("p",null,[e("strong",null,"Description")],-1),T=o(`<p>For example, to create a new style with font size 300 and the font Impact:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>text<span class="token punctuation">.</span>sourceText<span class="token punctuation">.</span><span class="token function">createStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token string">&quot;Impact&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Parameters</strong></p><p>None.</p><p><strong>Type</strong></p>`,5);function b(v,S){const s=l("RouterLink");return r(),i("div",null,[u,e("p",null,[t("These functions are accessible from "),n(s,{to:"/en/ae/expression/Text/text.html#text-sourcetext"},{default:a(()=>[t("Text.sourceText")]),_:1}),t(" after AE 17.0.")]),d,h,x,m,y,e("p",null,[n(s,{to:"/en/ae/expression/Text/text-style.html#textstyle"},{default:a(()=>[t("Text Style")]),_:1}),t(" object")]),_,e("p",null,[n(s,{to:"/en/ae/expression/Text/text-style.html#textstyle"},{default:a(()=>[t("Text Style")]),_:1}),t(" object")]),f,g,k,e("p",null,[t("Used to initialize an empty "),n(s,{to:"/en/ae/expression/Text/text-style.html#textstyle"},{default:a(()=>[t("Text Style")]),_:1}),t(" object inwhich you\u2019d manually bake in specific values.")]),T,e("p",null,[t("Empty "),n(s,{to:"/en/ae/expression/Text/text-style.html#textstyle"},{default:a(()=>[t("Text Style")]),_:1}),t(" object")])])}const w=c(p,[["render",b],["__file","Source-Text.html.vue"]]);export{w as default};
