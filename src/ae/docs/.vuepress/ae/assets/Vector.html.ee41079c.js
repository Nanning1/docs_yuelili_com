import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as n,a as t,b as e,d,e as s,r as c}from"./app.75ca2a8e.js";const p={},i=t("p",null,[e("Vector Math functions are global methods that perform operations on arrays,treating them as mathematical vectors. Unlike built-in JavaScript methods,such as "),t("code",null,"Math.sin"),e(", these methods are not used with the Math prefix. Unlessotherwise specified, Vector Math methods are lenient about dimensions andreturn a value that is the dimension of the largest input Array object,filling in missing elements with zeros.")],-1),h=t("p",null,[e("For example, the expression "),t("code",null,"add([10, 20], [1, 2, 3])"),e(" returns "),t("code",null,"[11, 22, 3]"),e(".")],-1),l=t("p",null,":::info Note",-1),u={href:"http://www.adobe.com/go/learn_ae_jjgiffordexpressionsgeometrytrig",target:"_blank",rel:"noopener noreferrer"},m=s(`<hr><h2 id="add-vec1-vec2" tabindex="-1"><a class="header-anchor" href="#add-vec1-vec2" aria-hidden="true">#</a> add(<code>vec1</code>, <code>vec2</code>)</h2><p><strong>Description</strong></p><p>Adds two vectors.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec1</code></td><td>Array</td></tr><tr><td><code>vec2</code></td><td>Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Array</p><hr><h2 id="sub-vec1-vec2" tabindex="-1"><a class="header-anchor" href="#sub-vec1-vec2" aria-hidden="true">#</a> sub(<code>vec1</code>, <code>vec2</code>)</h2><p><strong>Description</strong></p><p>Subtracts two vectors.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec1</code></td><td>Array</td></tr><tr><td><code>vec2</code></td><td>Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Array</p><hr><h2 id="mul-vec-amount" tabindex="-1"><a class="header-anchor" href="#mul-vec-amount" aria-hidden="true">#</a> mul(<code>vec</code>, <code>amount</code>)</h2><p><strong>Description</strong></p><p>Multiplies every element of the vector by the amount.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec</code></td><td>Array</td></tr><tr><td><code>amount</code></td><td>Number</td></tr></tbody></table><p><strong>Type</strong></p><p>Array</p><hr><h2 id="div-vec-amount" tabindex="-1"><a class="header-anchor" href="#div-vec-amount" aria-hidden="true">#</a> div(<code>vec</code>, <code>amount</code>)</h2><p><strong>Description</strong></p><p>Divides every element of the vector by the amount.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec</code></td><td>Array</td></tr><tr><td><code>amount</code></td><td>Number</td></tr></tbody></table><p><strong>Type</strong></p><p>Array</p><hr><h2 id="clamp-value-limit1-limit2" tabindex="-1"><a class="header-anchor" href="#clamp-value-limit1-limit2" aria-hidden="true">#</a> clamp(<code>value</code>, <code>limit1</code>, <code>limit2</code>)</h2><p><strong>Description</strong></p><p>The value of each component of <code>value</code> is constrained to fall between thevalues of the corresponding values of <code>limit1</code> and <code>limit2</code>.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>value</code></td><td>Number or Array</td></tr><tr><td><code>limit1</code></td><td>Number or Array</td></tr><tr><td><code>limit2</code></td><td>Number or Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Number or Array</p><hr><h2 id="dot-vec1-vec2" tabindex="-1"><a class="header-anchor" href="#dot-vec1-vec2" aria-hidden="true">#</a> dot(<code>vec1</code>, <code>vec2</code>)</h2><p><strong>Description</strong></p><p>Returns the dot (inner) product of the vector arguments.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec1</code></td><td>Array</td></tr><tr><td><code>vec2</code></td><td>Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Number</p><hr><h2 id="cross-vec1-vec2" tabindex="-1"><a class="header-anchor" href="#cross-vec1-vec2" aria-hidden="true">#</a> cross(<code>vec1</code>, <code>vec2</code>)</h2><p><strong>Description</strong></p><p>Returns the vector cross product of <code>vec1</code> and <code>vec2</code>. Refer to a mathreference or JavaScript guide for more information.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec1</code></td><td>Array (2- or 3-dimensional)</td></tr><tr><td><code>vec2</code></td><td>Array (2- or 3-dimensional)</td></tr></tbody></table><p><strong>Type</strong></p><p>Array (2- or 3-dimensional)</p><hr><h2 id="normalize-vec" tabindex="-1"><a class="header-anchor" href="#normalize-vec" aria-hidden="true">#</a> normalize(<code>vec</code>)</h2><p><strong>Description</strong></p><p>Normalizes the vector so that its length is <code>1.0</code>. Using the normalize methodis a short way of performing the operation <code>div(vec, length(vec))</code>.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec</code></td><td>Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Array</p><hr><h2 id="length-vec" tabindex="-1"><a class="header-anchor" href="#length-vec" aria-hidden="true">#</a> length(<code>vec</code>)</h2><p><strong>Description</strong></p><p>Returns the length of vector <code>vec</code>.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>vec</code></td><td>Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Number</p><hr><h2 id="length-point1-point2" tabindex="-1"><a class="header-anchor" href="#length-point1-point2" aria-hidden="true">#</a> length(<code>point1</code>, <code>point2</code>)</h2><p><strong>Description</strong></p><p>Returns the distance between two points. The <code>point2</code> argument is optional.</p><p>For example, <code>length(point1, point2)</code> is the same as <code>length(sub(point1, point2))</code>.</p><p>For example, add this expression to the Focus Distance property of a camera tolock the focal plane to the camera\u2019s point of interest so that the point of interest is in focus:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">length</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> pointOfInterest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>point1</code></td><td>Array</td></tr><tr><td><code>point2</code></td><td>Array</td></tr></tbody></table><p><strong>Type</strong></p><p>Number</p><hr><h2 id="lookat-frompoint-atpoint" tabindex="-1"><a class="header-anchor" href="#lookat-frompoint-atpoint" aria-hidden="true">#</a> lookAt(<code>fromPoint</code>, <code>atPoint</code>)</h2><p><strong>Description</strong></p><p>The argument <code>fromPoint</code> is the location in world space of the layer you wantto orient. The argument <code>atPoint</code> is the point in world space you want topoint the layer at. The return value can be used as an expression for theOrientation property, making the z-axis of the layer point at atPoint.</p><p>This method is especially useful for cameras and lights. If you use thisexpression on a camera, turn off auto-orientation.</p><p>For example, this expression on the Orientation property of a spot light makesthe light point at the anchor point of layer number 1 in the same composition:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">lookAt</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> thisComp<span class="token punctuation">.</span><span class="token function">layer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>fromPoint</code></td><td>Array (3-dimensional)</td></tr><tr><td><code>atPoint</code></td><td>Array (3-dimensional)</td></tr></tbody></table><p><strong>Type</strong></p><p>Array (3-dimensional)</p>`,94);function g(y,v){const o=c("ExternalLinkIcon");return a(),n("div",null,[i,h,l,t("p",null,[t("a",u,[e("JJ Gifford\u2019s website"),d(o)]),e("provides explanations and examples that show how to use simple geometry andtrigonometry with expressions. :::")]),m])}const x=r(p,[["render",g],["__file","Vector.html.vue"]]);export{x as default};
