import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c,a as e,b as n,d as t,w as l,e as a,r as o}from"./app.75ca2a8e.js";const d={},u=e("h2",{id:"description",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),n(" Description")],-1),m=e("h1",{id:"importoptions-object\xB6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#importoptions-object\xB6","aria-hidden":"true"},"#"),n(" ImportOptions object\xB6")],-1),h=e("p",null,[e("code",null,"new ImportOptions();")],-1),f=e("p",null,[e("code",null,"new ImportOptions(file);")],-1),g=e("p",null,[e("strong",null,"Description")],-1),k={href:"https://extendscript.docsforadobe.dev/file-system-access/file-object.html",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>If it is not supplied, you must explicitly set the value of the <code>file</code>attribute before using the object with the <code>importFile</code> method. For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ImportOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.psd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="attributes\xB6" tabindex="-1"><a class="header-anchor" href="#attributes\xB6" aria-hidden="true">#</a> Attributes\xB6</h2><h3 id="importoptions-file\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-file\xB6" aria-hidden="true">#</a> ImportOptions.file\xB6</h3><p><code>importOptions.file</code></p><p><strong>Description</strong></p><p>The file to be imported. If a file is set in the constructor, you can accessit through this attribute.</p><p><strong>Type</strong></p>`,9),v={href:"https://extendscript.docsforadobe.dev/file-system-access/file-object.html",target:"_blank",rel:"noopener noreferrer"},y=a(`<hr><h3 id="importoptions-forcealphabetical\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-forcealphabetical\xB6" aria-hidden="true">#</a> ImportOptions.forceAlphabetical\xB6</h3><p><code>importOptions.forceAlphabetical</code></p><p><strong>Description</strong></p><p>When true, has the same effect as setting the \u201CForce alphabetical order\u201Doption in the File &gt; Import &gt; File dialog box.</p><p><strong>Type</strong></p><p>Boolean; read/write.</p><hr><h3 id="importoptions-importas\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-importas\xB6" aria-hidden="true">#</a> ImportOptions.importAs\xB6</h3><p><code>importOptions.importAs</code></p><p><strong>Description</strong></p><p>The type of object for which the imported file is to be the source. Beforesetting, use canImportAs to check that a given file can be imported as thesource of the given object type.</p><p><strong>Type</strong></p><p>An <code>ImportAsType</code> enumerated value; read/write. One of:</p><ul><li><p><code>ImportAsType.COMP_CROPPED_LAYERS</code></p></li><li><p><code>ImportAsType.FOOTAGE</code></p></li><li><p><code>ImportAsType.COMP</code></p></li><li><p><code>ImportAsType.PROJECT</code></p></li></ul><hr><h3 id="importoptions-rangeend\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-rangeend\xB6" aria-hidden="true">#</a> ImportOptions.rangeEnd\xB6</h3><p><code>importOptions.rangeEnd</code></p><p>Warning</p><p>This method/property is officially undocumented and was found via research.The information here may be inaccurate, and this whole method/property maydisappear or stop working some point. Please contribute if you have more information on it!</p><p><strong>Description</strong></p><p>Sets the end clipping range of the sequence, that is going to be imported.</p><ul><li><p>Creates \u2018missing frames\u2019 (video-bards) if the <code>rangeEnd</code> exceeds the duration of the sequence to be imported.</p></li><li><p>Has no effect if sequence is set to false.</p></li><li><p>Throws an exception if forceAlphabetical is set to true.</p></li><li><p>Throws an exception if <code>rangeEnd</code> is less then rangeStart and resets the range to include all the files.</p></li></ul><p><strong>Type</strong></p><p>Integer; read/write.</p><hr><h3 id="importoptions-rangestart\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-rangestart\xB6" aria-hidden="true">#</a> ImportOptions.rangeStart\xB6</h3><p><code>importOptions.rangeStart</code></p><p>Warning</p><p>This method/property is officially undocumented and was found via research.The information here may be inaccurate, and this whole method/property maydisappear or stop working some point. Please contribute if you have more information on it!</p><p><strong>Description</strong></p><p>Sets the start clipping range of the sequence, that is going to be imported.</p><ul><li><p>Has no effect if sequence is set to false.</p></li><li><p>Throws an exception if forceAlphabetical is set to true.</p></li><li><p>Throws an exception if rangeEnd value is 0.</p></li><li><p>Throws an exception if <code>rangeStart</code> is greater then rangeEnd and resets the range to include all the files.</p></li></ul><p><strong>Type</strong></p><p>Integer; read/write.</p><p><strong>Example</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/* Import 20 frames of the sequence, starting at frame 10 and
ending at frame 30 */</span> <span class="token keyword">var</span> mySequence <span class="token operator">=</span> <span class="token string">&quot;~/Desktop/sequence/image_000.png&quot;</span><span class="token punctuation">;</span>
varimportOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImportOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
importOptions<span class="token punctuation">.</span>file <span class="token operator">=</span> <span class="token function">newFile</span><span class="token punctuation">(</span>mySequence<span class="token punctuation">)</span><span class="token punctuation">;</span>
importOptions<span class="token punctuation">.</span>sequence <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
importOptions<span class="token punctuation">.</span>forceAlphabetical <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
importOptions<span class="token punctuation">.</span>rangeStart <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
importOptions<span class="token punctuation">.</span>rangeEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> item <span class="token operator">=</span> app<span class="token punctuation">.</span>project<span class="token punctuation">.</span><span class="token function">importFile</span><span class="token punctuation">(</span>importOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="importoptions-sequence\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-sequence\xB6" aria-hidden="true">#</a> ImportOptions.sequence\xB6</h3><p><code>importOptions.sequence</code></p><p><strong>Description</strong></p><p>When true, a sequence is imported; otherwise, an individual file is imported.</p><p><strong>Type</strong></p><p>Boolean; read/write.</p><hr><h2 id="methods\xB6" tabindex="-1"><a class="header-anchor" href="#methods\xB6" aria-hidden="true">#</a> Methods\xB6</h2><h3 id="importoptions-canimportas-\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-canimportas-\xB6" aria-hidden="true">#</a> ImportOptions.canImportAs()\xB6</h3><p><code>importOptions.canImportAs(type)</code></p><p><strong>Description</strong></p><p>Reports whether the file can be imported as the source of a particular objecttype. If this method returns true, you can set the given type as the value of the importAs attribute.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>type</code></td><td>The type of file that can be imported. An <code>ImportAsType</code> enumerated value; one</td></tr></tbody></table><p>of:</p><ul><li><p><code>ImportAsType.COMP</code></p></li><li><p><code>ImportAsType.FOOTAGE</code></p></li><li><p><code>ImportAsType.COMP_CROPPED_LAYERS</code></p></li><li><p><code>ImportAsType.PROJECT</code></p></li></ul><p><strong>Returns</strong></p><p>Boolean.</p><p><strong>Example</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImportOptions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;c:\\\\myFile.psd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>io<span class="token punctuation">.</span><span class="token function">canImportAs</span><span class="token punctuation">(</span>ImportAsType<span class="token punctuation">.</span><span class="token constant">COMP</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  io<span class="token punctuation">.</span>importAs <span class="token operator">=</span> ImportAsType<span class="token punctuation">.</span><span class="token constant">COMP</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="importoptions-isfilenamenumbered-\xB6" tabindex="-1"><a class="header-anchor" href="#importoptions-isfilenamenumbered-\xB6" aria-hidden="true">#</a> ImportOptions.isFileNameNumbered()\xB6</h3><p><code>importOptions.isFileNameNumbered(file)</code></p><p>Warning</p><p>This method/property is officially undocumented and was found via research.The information here may be inaccurate, and this whole method/property maydisappear or stop working some point. Please contribute if you have more information on it!</p><p><strong>Description</strong></p><p>Reports whether the file object is numbered, i.e. file name has a digit.</p><p><strong>Parameters</strong></p>`,66),O=e("thead",null,[e("tr",null,[e("th",null,"Property"),e("th",null,"Type")])],-1),_=e("td",null,[e("code",null,"file")],-1),w={href:"https://extendscript.docsforadobe.dev/file-system-access/file-object.html",target:"_blank",rel:"noopener noreferrer"},I=a(`<p><strong>Returns</strong></p><p>Object, containing 2 keys:</p><ul><li><p><code>isNumbered</code>: Boolean; wether the file name contains any digit,</p></li><li><p><code>num</code>: Integer; a number found in file name. Returns 0 when <code>isNumbered</code> is false.</p></li></ul><p><strong>Example</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> importOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImportOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
importOptions<span class="token punctuation">.</span><span class="token function">isFileNameNumbered</span><span class="token punctuation">(</span><span class="token string">&quot;image.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;isNumbered&quot;: false, &quot;num&quot;:0 importOptions.isFileNameNumbered(&#39;003image.png&#39;); // &quot;isNumbered&quot;: true,&quot;num&quot;: 3 importOptions.isFileNameNumbered(&#39;ima0102ge.png&#39;); // &quot;isNumbered&quot;:true, &quot;num&quot;: 102 importOptions.isFileNameNumbered(&#39;image0120.png&#39;); //&quot;isNumbered&quot;: true, &quot;num&quot;: 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function x(T,q){const p=o("RouterLink"),s=o("ExternalLinkIcon");return r(),c("div",null,[u,m,h,f,g,e("p",null,[n("The ImportOptions object encapsulates the options used to import a file withthe "),t(p,{to:"/en/ae/scripting/general/project.html#project-importfile"},{default:l(()=>[n("Project.importFile()")]),_:1}),n(" methods.")]),e("p",null,[n("The constructor takes an optional parameter, an "),e("a",k,[n("ExtendscriptFile"),t(s)]),n(" object for the file.")]),b,e("p",null,[e("a",v,[n("Extendscript File"),t(s)]),n(" object; read/write.")]),y,e("table",null,[O,e("tbody",null,[e("tr",null,[_,e("td",null,[e("a",w,[n("Extendscript File"),t(s)]),n(" object.")])])])]),I])}const E=i(d,[["render",x],["__file","ImportOptions.html.vue"]]);export{E as default};
