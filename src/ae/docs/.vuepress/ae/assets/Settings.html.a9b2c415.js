import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as e,b as t,d as s,w as a,e as i,r as c}from"./app.75ca2a8e.js";const d={},l=i('<h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><h1 id="settings-object\xB6" tabindex="-1"><a class="header-anchor" href="#settings-object\xB6" aria-hidden="true">#</a> Settings object\xB6</h1><p><code>app.settings</code></p><p><strong>Description</strong></p><p>The Settings object provides an easy way to manage settings for third-partyscripts. The settings are saved in the main After Effects preferences file,and are persistent between application sessions.</p><p>Settings are identified by section and key within the file, and each key nameis associated with a value.</p><p>In the settings file, section names are enclosed in brackets and quotationmarks, and key names are listing in quotation marks below the sectionname. All values are strings.</p><p>You can create new settings with this object, as well as accessing existing settings.</p>',8),g=e("p",null,":::info Note",-1),h=e("li",null,[e("p",null,"These values aren\u2019t shared between versions of AE; each new install brings new settings files, and so these prefs won\u2019t carry over.")],-1),u=e("li",null,[e("p",null,[t("Internally, all saved settings have their section name preprended with "),e("code",null,'"Settings_"')])],-1),m=i(`<p>:::tip</p><ul><li><p>It\u2019s best practice to use one <code>sectionName</code> per script; this keeps your settings organized and easy to find &amp; work with.</p></li><li><p>There isn\u2019t really any benefit in saving your settings to a specific preferences file; omitting the third argument and using the default is likely all you\u2019ll need.</p></li></ul><p>:::</p><h2 id="methods\xB6" tabindex="-1"><a class="header-anchor" href="#methods\xB6" aria-hidden="true">#</a> Methods\xB6</h2><h3 id="settings-getsetting-\xB6" tabindex="-1"><a class="header-anchor" href="#settings-getsetting-\xB6" aria-hidden="true">#</a> Settings.getSetting()\xB6</h3><p><code>app.settings.getSetting(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Retrieves a script settings item value from the preferences file.</p><p>Warning</p><p>If the value is greater than 1999 bytes, <code>getSetting</code> that item will throw anerror (seen in AE 15.0.1)</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a settings section.</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the setting item.</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use.</td></tr></tbody></table><p><strong>Returns</strong></p><p>String.</p><p><strong>Example</strong></p><p>If you have saved a setting named with the key name \u201CtrimPrecomps\u201D in asection called \u201CPrecomp Cropper\u201D, you can retrieve the value by:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> trimPrecompsSetting <span class="token operator">=</span> app<span class="token punctuation">.</span>settings<span class="token punctuation">.</span><span class="token function">getSetting</span><span class="token punctuation">(</span>&quot;Precomp
Cropper<span class="token string">&quot;, &quot;</span>trimPrecomps<span class="token string">&quot;); alert(&quot;</span>The setting is<span class="token operator">:</span> &quot; <span class="token operator">+</span> trimPrecompsSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="settings-havesetting-\xB6" tabindex="-1"><a class="header-anchor" href="#settings-havesetting-\xB6" aria-hidden="true">#</a> Settings.haveSetting()\xB6</h3><p><code>app.settings.haveSetting(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Returns true if the specified script settings item exists and has a value.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a settings section.</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the setting item.</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use.</td></tr></tbody></table><p><strong>Returns</strong></p><p>Boolean.</p><hr><h3 id="settings-savesetting-\xB6" tabindex="-1"><a class="header-anchor" href="#settings-savesetting-\xB6" aria-hidden="true">#</a> Settings.saveSetting()\xB6</h3><p><code>app.settings.saveSetting(sectionName, keyName, value[, prefType])</code></p><p><strong>Description</strong></p><p>Saves a value for a script settings item.</p><p>Warning</p><p>If the value is greater than 1999 bytes, <code>saveSetting</code> that item will throw anerror (seen in AE 15.0.1)</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a settings section.</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the setting item.</td></tr><tr><td><code>value</code></td><td>A string containing the new value.</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use.</td></tr></tbody></table><p><strong>Returns</strong></p><p>Nothing.</p><p><strong>Example</strong></p><p>If you want to save a setting called \u201CtrimPrecomps\u201D for a script named\u201CPrecomp Cropper\u201D, you could save that setting via</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> trimPrecompsSetting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span>settings<span class="token punctuation">.</span><span class="token function">saveSetting</span><span class="token punctuation">(</span><span class="token string">&quot;Precomp Cropper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;trimPrecomps&quot;</span><span class="token punctuation">,</span> trimPrecompsSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the setting will be saved as a string. You\u2019ll want to parse it into a bool later, if needed.</p>`,41);function f(v,y){const n=c("RouterLink");return o(),p("div",null,[l,e("p",null,[t("As of Version 12/CC, preferences and settings methods now take a thirdargument to specify the target preferences file if Section/Key is not in themain preferences file. See "),s(n,{to:"/en/ae/scripting/Other/preferences.html#preferences"},{default:a(()=>[t("Preferences object")]),_:1}),t(" for more info.")]),g,e("ul",null,[h,u,e("li",null,[e("p",null,[t("If you\u2019re looking to get or set internal AE preferences, see "),s(n,{to:"/en/ae/scripting/Other/preferences.html#preferences"},{default:a(()=>[t("Preferences object")]),_:1}),t(" :::")])])]),m])}const w=r(d,[["render",f],["__file","Settings.html.vue"]]);export{w as default};
