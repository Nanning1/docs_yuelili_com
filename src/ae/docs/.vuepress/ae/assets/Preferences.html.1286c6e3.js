import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as o,a as t,b as e,d as p,w as c,e as r,r as d}from"./app.75ca2a8e.js";const i={},f=r('<h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><h1 id="preferences-object\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-object\xB6" aria-hidden="true">#</a> Preferences object\xB6</h1><p><code>app.preferences</code></p><p><strong>Description</strong></p><p>The Preferences object provides an easy way to manage internal AE preferences,such as you\u2019d find in AE\u2019s Preferences menu. These are saved in the AfterEffects preference files, and are persistent between application sessions.</p><p>Preferences are identified by section and key within the file, and each keyname is associated with a value.</p><p>In the preferences file, section names are enclosed in brackets and quotationmarks, and key names are listing in quotation marks below the sectionname. All values are strings.</p><p>You can create new preferences with this object, as well as accessing existing preferences.</p><p>As of Version 12/CC, preferences and settings methods now take a thirdargument to specify the target preferences file if Section/Key is not in\u201CAdobe After Effects $versionNumber.x Prefs.txt\u201D.</p><p>If the third argument is not passed, default value(<code>PREFType.PREF_Type_MACHINE_SPECIFIC</code>) is used and After Effects tries tosave/get from the \u201CAdobe After Effects $versionNumber.x Prefs.txt\u201D preferences file.</p><p>The third argument is enum <code>PREFType</code> value, one of:</p><ul><li><p><code>PREF_Type_MACHINE_SPECIFIC</code>: Adobe After Effects $versionNumber.x Prefs.txt</p></li><li><p><code>PREF_Type_MACHINE_INDEPENDENT</code>: Adobe After Effects $versionNumber.x Prefs-indep-general.txt</p></li><li><p><code>PREF_Type_MACHINE_INDEPENDENT_RENDER</code>: Adobe After Effects $versionNumber.x Prefs-indep-render.txt</p></li><li><p><code>PREF_Type_MACHINE_INDEPENDENT_OUTPUT</code>: Adobe After Effects $versionNumber.x Prefs-indep-output.txt</p></li><li><p><code>PREF_Type_MACHINE_INDEPENDENT_COMPOSITION</code>: Adobe After Effects $versionNumber.x Prefs-indep-composition.txt</p></li><li><p><code>PREF_Type_MACHINE_SPECIFIC_TEXT</code>: Adobe After Effects $versionNumber.x Prefs-text.txt</p></li><li><p><code>PREF_Type_MACHINE_SPECIFIC_PAINT</code>: Adobe After Effects $versionNumber.x Prefs-paint.txt</p></li></ul><hr><h2 id="methods\xB6" tabindex="-1"><a class="header-anchor" href="#methods\xB6" aria-hidden="true">#</a> Methods\xB6</h2><h3 id="preferences-deletepref-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-deletepref-\xB6" aria-hidden="true">#</a> Preferences.deletePref()\xB6</h3><p><code>app.preferences.deletePref(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Deletes a preference from the preference file.</p><p>:::tip</p>',19),h=t("code",null,'"Settings_"',-1),l=r(`<p>:::</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Nothing.</p><p><strong>Example</strong></p><p>If you have saved a setting named with the key name \u201CtrimPrecomps\u201D in asection called \u201CPrecomp Cropper\u201D, you can delete the setting by:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>preferences<span class="token punctuation">.</span><span class="token function">deletePref</span><span class="token punctuation">(</span><span class="token string">&quot;Settings_Precomp Cropper&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;trimPrecomps&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="preferences-getprefasbool-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-getprefasbool-\xB6" aria-hidden="true">#</a> Preferences.getPrefAsBool()\xB6</h3><p><code>app.preferences.getPrefAsBool(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Retrieves a preference value from the preferences file, and parses it as a boolean.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Boolean.</p><p><strong>Example</strong></p><p>To retrieve the value of the Flow Chart \u201CExpand Flowchart Comps by Default\u201D preference:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> expandByDefault <span class="token operator">=</span> app<span class="token punctuation">.</span>preferences<span class="token punctuation">.</span><span class="token function">getPrefAsBool</span><span class="token punctuation">(</span>&quot;Flowchart
Settings<span class="token string">&quot;, &quot;</span>Expand Flowchart Comps by Default<span class="token string">&quot;); alert(&quot;</span>The setting is<span class="token operator">:</span> &quot; <span class="token operator">+</span>expandByDefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>To retrieve the value of the main preference \u201CJavascript Debugger Enabled\u201D:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> debuggerEnabled <span class="token operator">=</span> app<span class="token punctuation">.</span>preferences<span class="token punctuation">.</span><span class="token function">getPrefAsBool</span><span class="token punctuation">(</span>&quot;Main Pref
Section v2<span class="token string">&quot;, &quot;</span>Pref_JAVASCRIPT_DEBUGGER<span class="token string">&quot;,PREFType.PREF_Type_MACHINE_INDEPENDENT); alert(&quot;</span>The setting is<span class="token operator">:</span> &quot; <span class="token operator">+</span>debuggerEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="preferences-getprefasfloat-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-getprefasfloat-\xB6" aria-hidden="true">#</a> Preferences.getPrefAsFloat()\xB6</h3><p><code>app.preferences.getPrefAsFloat(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Retrieves a preference value from the preferences file, and parses it as a float.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Float.</p><hr><h3 id="preferences-getprefaslong-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-getprefaslong-\xB6" aria-hidden="true">#</a> Preferences.getPrefAsLong()\xB6</h3><p><code>app.preferences.getPrefAsLong(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Retrieves a preference value from the preferences file, and parses it as a long (number).</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Long.</p><hr><h3 id="preferences-getprefasstring-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-getprefasstring-\xB6" aria-hidden="true">#</a> Preferences.getPrefAsString()\xB6</h3><p><code>app.preferences.getPrefAsString(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Retrieves a preference value from the preferences file, and parses it as a string.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>String.</p><hr><h3 id="preferences-havepref-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-havepref-\xB6" aria-hidden="true">#</a> Preferences.havePref()\xB6</h3><p><code>app.preferences.havePref(sectionName, keyName[, prefType])</code></p><p><strong>Description</strong></p><p>Returns true if the specified preference item exists and has a value.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Boolean.</p><hr><h3 id="preferences-reload-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-reload-\xB6" aria-hidden="true">#</a> Preferences.reload()\xB6</h3><p><code>app.preferences.reload()</code></p><p><strong>Description</strong></p><p>Reloads the preferences file manually. Otherwise, changes to preferences willonly be accessible by scripting after an application restart.</p><p><strong>Parameters</strong></p><p>None.</p><p><strong>Returns</strong></p><p>Nothing.</p><hr><h3 id="preferences-saveprefasbool-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-saveprefasbool-\xB6" aria-hidden="true">#</a> Preferences.savePrefAsBool()\xB6</h3><p><code>app.preferences.savePrefAsBool(sectionName, keyName, value[, prefType])</code></p><p><strong>Description</strong></p><p>Saves a preference item as a boolean.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>value</code></td><td>A boolean containing the new value</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Nothing.</p><hr><h3 id="preferences-saveprefasfloat-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-saveprefasfloat-\xB6" aria-hidden="true">#</a> Preferences.savePrefAsFloat()\xB6</h3><p><code>app.preferences.savePrefAsFloat(sectionName, keyName, value[, prefType])</code></p><p><strong>Description</strong></p><p>Saves a preference item as a float.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>value</code></td><td>A float containing the new value</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Nothing.</p><hr><h3 id="preferences-saveprefaslong-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-saveprefaslong-\xB6" aria-hidden="true">#</a> Preferences.savePrefAsLong()\xB6</h3><p><code>app.preferences.savePrefAsLong(sectionName, keyName, value[, prefType])</code></p><p><strong>Description</strong></p><p>Saves a preference item as a long.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>value</code></td><td>A long containing the new value</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Nothing.</p><hr><h3 id="preferences-saveprefasstring-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-saveprefasstring-\xB6" aria-hidden="true">#</a> Preferences.savePrefAsString()\xB6</h3><p><code>app.preferences.savePrefAsString(sectionName, keyName, value[, prefType])</code></p><p><strong>Description</strong></p><p>Saves a preference item as a string.</p><p><strong>Parameters</strong></p><table><thead><tr><th>Property</th><th>Type</th></tr></thead><tbody><tr><td><code>sectionName</code></td><td>A string containing the name of a preferences section</td></tr><tr><td><code>keyName</code></td><td>A string containing the key name of the preference</td></tr><tr><td><code>value</code></td><td>A string containing the new value</td></tr><tr><td><code>prefType</code></td><td>Optional, an enum indicating which preference file to use</td></tr></tbody></table><p><strong>Returns</strong></p><p>Nothing.</p><hr><h3 id="preferences-savetodisk-\xB6" tabindex="-1"><a class="header-anchor" href="#preferences-savetodisk-\xB6" aria-hidden="true">#</a> Preferences.saveToDisk()\xB6</h3><p><code>app.preferences.saveToDisk()</code></p><p><strong>Description</strong></p><p>Saves the preferences to disk manually. Otherwise, changes to preferences willonly be accessible by scripting after an application restart.</p><p><strong>Parameters</strong></p><p>None.</p><p><strong>Returns</strong></p><p>Nothing.</p>`,112);function g(u,m){const n=d("RouterLink");return s(),o("div",null,[f,t("p",null,[e("It\u2019s generally inadvised to delete internal AE preferences, however you canleverage this method to delete "),p(n,{to:"/en/ae/scripting/Other/settings.html#settings"},{default:c(()=>[e("Settings object")]),_:1}),e(" youhave saved. Note that you\u2019ll need to preprend "),h,e(" to your section name.")]),l])}const v=a(i,[["render",g],["__file","Preferences.html.vue"]]);export{v as default};
